package seedu.command;

import seedu.category.Category;
import seedu.category.CategoryList;
import seedu.message.CommandResultMessages;

import java.util.ArrayList;
import java.util.List;

public class ViewCategoryCommand extends Command{
    public static final String COMMAND_WORD = "view-category"; // The word associated with the command
    public static final String COMMAND_GUIDE = "view-category: "
            + "View your category list"; // A guide or description of the command
    public static final String[] COMMAND_MANDATORY_KEYWORDS = {}; // Keywords for arguments
    public static final String[] COMMAND_EXTRA_KEYWORDS = {}; // Keywords for arguments

    private CategoryList categoryList = new CategoryList();

    /**
     * Constructor sets the category list for the command.
     *
     * @param categoryList the input category list
     */
    public ViewCategoryCommand(CategoryList categoryList) {
        setCategoryList(categoryList);
    }

    /**
     * Sets the category list for the command.
     *
     * @param categoryList the input category list
     */
    public void setCategoryList(CategoryList categoryList) {
        this.categoryList = categoryList;
    }

    /**
     * Executes the command and returns a list of category information.
     *
     * @return A list of strings containing the messages generated by the command execution.
     */
    @Override
    public List<String> execute() {
        List<String> messages = new ArrayList<>();

        if (categoryList.size() == 0) {
            return List.of(CommandResultMessages.VIEW_CATEGORY_EMPTY);
        }
        int i = 1;
        for (Category category: categoryList.getCategories()) {
            messages.add(i + ". " + category.getName());
            i++;
        }

        return messages;
    }

    /**
     * Gets the mandatory keywords for the command.
     *
     * @return An array of strings containing the mandatory keywords associated with this command.
     */
    @Override
    protected String[] getMandatoryKeywords() {
        return COMMAND_MANDATORY_KEYWORDS;
    }

    /**
     * Gets the extra keywords for the command.
     *
     * @return An array of strings containing the extra keywords associated with this command.
     */
    @Override
    protected String[] getExtraKeywords() {
        return COMMAND_EXTRA_KEYWORDS;
    }

    /**
     * Gets the word for the command.
     *
     * @return A string representing the command word.
     */
    @Override
    protected String getCommandWord() {
        return COMMAND_WORD;
    }

    /**
     * Gets the guide for the command.
     *
     * @return A string representing the command guide.
     */
    @Override
    protected String getCommandGuide() {
        return COMMAND_GUIDE;
    }
}
