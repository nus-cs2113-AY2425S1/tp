@startuml
skinparam classAttributeIconSize 0
hide circle
abstract class "<<abstract>>\nCommand" {
    + execute(): List<String>
}

abstract class AddTransactionCommand {

    + execute(): List<String>
    # parseDescription(arguments: Map<String, String>): String
    # parseAmount(amountStr: String): Double
    # parseDate(dateStr: String): String
    # createTransaction(amount: double, description: String, date: String): Transaction
}

class AddIncomeCommand {
    + execute(): List<String>
}

class TransactionList {
    - transactions : ArrayList<Transaction>
    - invertedIndex : Map<String, List<Transaction>>

    + TransactionList()
    + addTransaction(transaction : Transaction) : void
    + deleteTransaction(index : int) : Transaction
    + getTransactions() : ArrayList<Transaction>
    + getTransactionsBetween(startTime : LocalDateTime, endTime : LocalDateTime) : List<Transaction>
    + getExpensesByCategory(category : Category) : List<Transaction>
    + searchTransactionsByKeywords(keywords : List<String>) : List<Transaction>
    + getTodaySpending() : double
    + updateCategory(index : int, newCategory : Category) : boolean
}

class Income {
    + Income(amount: double, description: String, date: String)
    + getTransactionType() : String
}

AddTransactionCommand <|-- AddIncomeCommand
"<<abstract>>\nCommand" <|-- AddTransactionCommand
AddIncomeCommand --> "1" TransactionList : uses >
TransactionList --> "*" Income : stores >
@enduml

@startuml
participant ":Main" as User

"User" -[hidden]> "User" :
activate User

participant ":AddIncomeCommand" as AddIncomeCmd
User -> AddIncomeCmd: execute()
activate AddIncomeCmd

alt Invalid arguments
    AddIncomeCmd --> User: "Error: Missing or invalid arguments"
else Valid arguments
    participant ":Income" as IncomeClass
    AddIncomeCmd -> IncomeClass: createTransaction(amount, description, date)
    activate IncomeClass
    IncomeClass --> AddIncomeCmd: Income instance
    deactivate IncomeClass

    participant ":TransactionList" as TransList
    AddIncomeCmd -> TransList: addTransaction(Income)
    activate TransList
    TransList --> AddIncomeCmd: success
    deactivate TransList

    participant "<<class>>\nStorage" as Storage
    AddIncomeCmd -> Storage: saveTransaction(TransactionList.getTransactions())
    activate Storage
    Storage --> AddIncomeCmd: confirmation
    deactivate Storage

    AddIncomeCmd --> User: "Income added successfully!"
deactivate AddIncomeCmd
end

"User" -[hidden]> "User" :
deactivate User

@enduml