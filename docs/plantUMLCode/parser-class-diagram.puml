@startuml
participant ":Main" as Main
"Main" -[hidden]> "Main" :

activate Main
create "helpCommand:HelpCommand" as HelpCommand
Main -> HelpCommand: HelpCommand()

activate HelpCommand

HelpCommand --> Main: helpCommand:HelpCommand
deactivate HelpCommand
participant "parser:Parser" as Parser
Main -> Parser: registerCommand(helpCommand)
activate Parser

participant "commands:LinkedHashMap" as CommandMap

Parser -> HelpCommand: getClass()
activate HelpCommand
HelpCommand --> Parser: HelpCommand: class
deactivate HelpCommand

Parser -> HelpCommand: getField("COMMAND_WORD")
activate HelpCommand
opt Field found
    HelpCommand --> Parser: commandWord: String
    deactivate HelpCommand
    Parser -> CommandMap: put(commandWord, helpCommand)
    activate CommandMap

    CommandMap --> Parser: return

    deactivate CommandMap
end

Parser --> Main: return
deactivate Parser
"Main" -[hidden]> "Main" :
deactivate Main
@enduml

@startuml
participant ":Main" as Main
"Main" -[hidden]> "Main" :
activate Main
participant "parser:Parser" as Parser
Main -> Parser: parseCommand(commandWord:String)

activate Parser

Parser -> "commands: LinkedHashMap" as CommandMap: get(commandPart)
activate CommandMap
alt Command found
    CommandMap --> Parser: command: Command
else else
    CommandMap --> Parser: null
    deactivate CommandMap
end

Parser --> Main: command:Command or null
deactivate Parser
"Main" -[hidden]> "Main" :
deactivate Main
@enduml

@startuml
participant ":Main" as Main
"Main" -[hidden]> "Main" :
activate Main
participant "parser:Parser" as Parser
Main -> Parser: extractArguments(command, argumentString)
activate Parser

participant "command:Command" as Command
Parser -> Command: getArgumentKeys()
activate Command
Command --> Parser: keywords: String[]
deactivate Command

Parser -> Parser: splitCommandRecursively(argumentString, keywords, arguments, firstKeyWord="")
activate Parser
Parser --> Parser
deactivate Parser

Parser --> Main: arguments:Map<String,String>
deactivate Parser
"Main" -[hidden]> "Main" :
deactivate Main
@enduml

@startuml
start

if (argumentString.IsEmpty()) then (yes)
    :Return;
    stop
else (no)
    :Initialize
    keywordIndex = -1 and keywordFound = null;

    :Loop through each keyword to find the first occurrence in argumentString;
    if (keywordIndex != -1) then (yes)
        :Get text before keyword: beforeKeyword;
        :arguments.put(prevKeyword, beforeKeyword);

        :afterKeyword = getAfterKeyword(argumentString, keywordIndex);
        :keywords.remove(keyword);

        :Recursively call splitCommandRecursively
        with argumentString = afterKeyword;
        -> splitCommandRecursively;
    else (no)
        :arguments.put(prevKeyword, argumentString);
    endif
endif

stop
@enduml
