@startuml
actor User
participant ":Ui" as Ui
participant ":BuffBuddy" as BuffBuddy
participant ":Parser" as Parser
participant ":CommandFactory" as CommandFactory
participant ":ProgCommandFactory" as ProgCommandFactory
participant ":EditProgrammeCommand" as Command
participant ":Model" as Model
participant ":CommandResult" as CommandResult
participant ":Exercise" as Exercise
participant ":ExerciseUpdate" as ExerciseUpdate
participant ":Day" as Day

User -> Ui : "prog edit..."
activate Ui
BuffBuddy -> Ui: readCommand()
activate BuffBuddy
Ui --> BuffBuddy : "prog edit..."

BuffBuddy -> Parser : parse("prog edit...")
activate Parser

Parser -> CommandFactory : createCommand("prog", "edit...")

activate CommandFactory

CommandFactory -> ProgCommandFactory : parse("edit",arguments)

activate ProgCommandFactory

ProgCommandFactory -> ProgCommandFactory : prepareEditCommand(arguments)
activate ProgCommandFactory

create FlagParser

ProgCommandFactory -> FlagParser: FlagParser(arguments)
activate FlagParser
FlagParser -> FlagParser : parse(arguments)
activate FlagParser
FlagParser --> FlagParser
deactivate FlagParser
ProgCommandFactory <-- FlagParser: parsed arguments
deactivate FlagParser

alt edit type is create day
    ProgCommandFactory -> ProgCommandFactory: parseDay(dayString)
    activate ProgCommandFactory
    create Day
    ProgCommandFactory -> Day : Day(...)
    activate Day
    ProgCommandFactory <-- Day: created Day


    loop for each exercise in the day
        create Exercise
        ProgCommandFactory -> Exercise : Exercise(...)
        activate Exercise
        ProgCommandFactory <-- Exercise: created Exercise
        deactivate Exercise
        ProgCommandFactory -> Day : insertExercise(...)
        ProgCommandFactory <-- Day
    end

    deactivate Day
    ProgCommandFactory --> ProgCommandFactory: created Day
    deactivate ProgCommandFactory
else edit type is create exercise
    ProgCommandFactory -> ProgCommandFactory: parseExercise(exerciseString)
    activate ProgCommandFactory
    create Exercise
    ProgCommandFactory -> Exercise: Exercise(...)
    activate Exercise
    ProgCommandFactory <-- Exercise: created Exercise
    deactivate Exercise
    ProgCommandFactory --> ProgCommandFactory: created Exercise
    deactivate ProgCommandFactory
else  edit type is update exercise
    ProgCommandFactory -> ProgCommandFactory: parseExerciseUpdate(updateString)
    activate ProgCommandFactory
    create ExerciseUpdate
    ProgCommandFactory -> ExerciseUpdate: ExerciseUpdate(...)
    activate ExerciseUpdate
    ProgCommandFactory <-- ExerciseUpdate: created ExerciseUpdate
    deactivate ExerciseUpdate
    ProgCommandFactory --> ProgCommandFactory: created ExerciseUpdate

    deactivate ProgCommandFactory
else other edit type
end
create Command
ProgCommandFactory -> Command : create appropiate Edit Command

deactivate ProgCommandFactory

activate Command
ProgCommandFactory <-- Command : created EditProgrammeCommand
CommandFactory <-- ProgCommandFactory : created EditProgrammeCommand
deactivate ProgCommandFactory

Parser <-- CommandFactory : created EditProgrammeCommand
destroy FlagParser
deactivate CommandFactory


BuffBuddy <-- Parser : created EditProgrammeCommand
deactivate Parser

BuffBuddy -> Command : execute()


Command -> Model : interact with Model
activate Model
Command <-- Model: returned Data
deactivate Model

create CommandResult
Command -> CommandResult: create Command Result
destroy ExerciseUpdate



activate CommandResult
Command <-- CommandResult : created CommandResult
deactivate CommandResult
BuffBuddy <-- Command: created CommandResult
deactivate Command

BuffBuddy -> Ui : showMessage()

deactivate BuffBuddy

User <-- Ui : "Successfully edited..."
deactivate Ui
destroy Command
destroy CommandResult
@enduml