@startuml

!include .SequenceDiagram.config
hide footbox

actor CEG_Student
participant ":ObtainContactsCommand" as ObtainContactsCommand
participant ":SchoolContactValidator" as SchoolContactValidator

participant ":UI" as UI
participant ":Command" as Command

CEG_Student -> ObtainContactsCommand: execute(userInput: String)
activate ObtainContactsCommand

ObtainContactsCommand -> Command: createJsonObject()
activate Command

Command --> ObtainContactsCommand: JsonObject jsonObject
deactivate Command

ObtainContactsCommand -> ObtainContactsCommand: getSchoolName(userInput: String)
activate ObtainContactsCommand
return schoolName: String

ObtainContactsCommand -> ObtainContactsCommand: getContactType(userInput: String)
activate ObtainContactsCommand

alt inputParts.length != 2
    ObtainContactsCommand --> CEG_Student: Displays Invalid Input Error
else else
    return contactType: String
end

ObtainContactsCommand -> ObtainContactsCommand: findMatchingSchool(jsonObject: JsonObject, schoolName: String)
activate ObtainContactsCommand

ObtainContactsCommand -> SchoolContactValidator: isSchoolValid(jsonObject : JsonObject, schoolName : String)
activate SchoolContactValidator

SchoolContactValidator --> ObtainContactsCommand: isSchoolValid:Boolean
deactivate SchoolContactValidator

alt school is valid
    ObtainContactsCommand -> ObtainContactsCommand: getMatchingSchoolName(jsonObject : JsonObject, schoolName : String)
    activate ObtainContactsCommand

    loop for  each school found in the set of schools
        opt checks if the school name matches
            return key: String
        end
    end

else else
        ObtainContactsCommand --> CEG_Student: Display "Unknown university - " + schoolName
end
ObtainContactsCommand --> ObtainContactsCommand: matchingSchool: String

deactivate ObtainContactsCommand

ObtainContactsCommand -> ObtainContactsCommand: checkValidContact(schoolInfo: JsonObject, matchingSchool: String, contactType: String)
activate ObtainContactsCommand

ObtainContactsCommand -> SchoolContactValidator: isValidContactType(contactType : String)
activate SchoolContactValidator
SchoolContactValidator --> ObtainContactsCommand: isValidContactType : Boolean
deactivate SchoolContactValidator

alt contact type is valid
    ObtainContactsCommand -> ObtainContactsCommand: contactTypeIdentifier(schoolInfo: String, schoolName : String, contactType : String)
    activate ObtainContactsCommand

    opt EMAIL_KEY
        ObtainContactsCommand -> UI: printContactInformation(EMAIL_TAG: String, schoolName: String, email:String)
    else NUMBER_KEY
        ObtainContactsCommand -> UI: printContactInformation(NUMBER_TAG: String, schoolName: String, number:String)
    end

else else
    ObtainContactsCommand --> CEG_Student: Display Invalid Contact Type Message
end

deactivate ObtainContactsCommand

ObtainContactsCommand --> ObtainContactsCommand

deactivate ObtainContactsCommand

ObtainContactsCommand --> CEG_Student

deactivate ObtainContactsCommand

@enduml
