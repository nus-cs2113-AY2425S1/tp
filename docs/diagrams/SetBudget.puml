@startuml

actor User
participant ":SpendSwift" as SpendSwift
participant ":Parser" as Parser
participant ":BudgetManager" as BudgetManager
participant ":InputParser" as InputParser
participant ":TrackerData" as TrackerData

User -> SpendSwift : input("set-budget c/<category> l/<limit>")
activate SpendSwift
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> BudgetManager : setBudgetLimitRequest(input, budgetManager, trackerData)

activate BudgetManager
BudgetManager -> InputParser : parseCategory(input)
activate InputParser
InputParser -> InputParser : parseComponent(input, "c/")
    activate InputParser
    InputParser --> InputParser : return category: String
    deactivate InputParser
InputParser --> BudgetManager : return category: String
deactivate InputParser

BudgetManager -> InputParser : parseLimit(input)
activate InputParser
InputParser -> InputParser : parseComponent(input, "l/")
    activate InputParser
    InputParser --> InputParser : return limit: double
    deactivate InputParser
InputParser --> BudgetManager : return limit: double
deactivate InputParser

opt category.isEmpty() || Double.isNaN(limit) || limit < 0
    BudgetManager -> ErrorMessage : printMissingCategory(formattedCategoryName)
    activate ErrorMessage
    ErrorMessage --> BudgetManager : return
    deactivate ErrorMessage
    BudgetManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

BudgetManager -> BudgetManager : setBudgetLimit(trackerData, category, limit)
activate BudgetManager

BudgetManager -> TrackerData : Initialize totalExpensesToCategory map
activate TrackerData
TrackerData --> BudgetManager : return budgets Map<Category, Budget>
deactivate TrackerData

BudgetManager -> TrackerData : getCategories()
activate TrackerData
TrackerData --> BudgetManager : return categories: List<Category>
deactivate TrackerData

BudgetManager -> Format : formatInput(categoryName)
activate Format
Format --> BudgetManager : return formattedCategoryName: String
deactivate Format

opt Limit Exceeds Maximum Value
    BudgetManager -> ErrorMessage : printExceedMax(maxLimit)
    activate ErrorMessage
    ErrorMessage --> BudgetManager : return
    deactivate ErrorMessage
    BudgetManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

    loop Search for Category
        BudgetManager -> Category : Check if category matches formattedCategoryName
        activate Category
        Category --> BudgetManager : Return matching category or null
        deactivate Category

    opt Category Not Found
        BudgetManager -> ErrorMessage : printMissingCategory(formattedCategoryName)
        activate ErrorMessage
        ErrorMessage --> BudgetManager : return
        deactivate ErrorMessage
        BudgetManager --> Parser : return
        Parser --> SpendSwift : return
        SpendSwift --> User : return
    end

    alt Budget Exists for Category
        BudgetManager -> Budget : update existing budget with new limit
        activate Budget
        Budget --> BudgetManager : confirm updated budget
        deactivate Budget
        BudgetManager -> SuccessMessage : printExistingLimit(existingCategory, preciseLimit)
        activate SuccessMessage
        SuccessMessage --> BudgetManager : return
        deactivate SuccessMessage
    else No Existing Budget
        BudgetManager -> Budget : create new budget instance with limit
        activate Budget
        Budget --> BudgetManager : return new budget instance
        deactivate Budget
        BudgetManager -> TrackerData : add new budget to budgets map
        BudgetManager -> SuccessMessage : printNewLimit(existingCategory, preciseLimit)
        activate SuccessMessage
        SuccessMessage --> BudgetManager : return
        deactivate SuccessMessage
    end

    BudgetManager --> BudgetManager : return
    deactivate BudgetManager

    BudgetManager --> Parser : return
    deactivate BudgetManager

    Parser --> SpendSwift : return false
    deactivate Parser

    SpendSwift --> User : return
    deactivate SpendSwift

end

@enduml


