@startuml
actor User
participant ":SpendSwift" as SpendSwift
participant ":Parser" as Parser
participant ":ExpenseManager" as ExpenseManager
participant ":InputParser" as InputParser
participant ":TrackerData" as TrackerData
participant ":Format" as Format
participant ":Category" as Category
participant ":Expense" as Expense

User -> SpendSwift : input("add-expense n/<name> a/<amount> c/<category>")
activate SpendSwift
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> ExpenseManager : addExpenseRequest(input, trackerData)

activate ExpenseManager
ExpenseManager -> InputParser : parseName(input)
activate InputParser
InputParser -> InputParser : parseComponent(input, "n/")
    activate InputParser
    InputParser --> InputParser : return name: String
    deactivate InputParser
InputParser --> ExpenseManager : return name: String
deactivate InputParser

ExpenseManager -> InputParser : parseAmount(input)
activate InputParser
InputParser -> InputParser : parseComponent(input, "a/")
    activate InputParser
    InputParser --> InputParser : return amount: double
    deactivate InputParser
InputParser --> ExpenseManager : return amount: double
deactivate InputParser

ExpenseManager -> InputParser : parseCategory(input)
activate InputParser
InputParser -> InputParser : parseComponent(input, "c/")
    activate InputParser
    InputParser --> InputParser : return category: String
    deactivate InputParser
InputParser --> ExpenseManager : return category: String
deactivate InputParser

opt Name is empty || Amount is NaN || Category is empty || Amount < 0
    ExpenseManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

ExpenseManager -> ExpenseManager : addExpense(trackerData, name, amount, category)
activate ExpenseManager
ExpenseManager -> TrackerData : getExpenses()
activate TrackerData
TrackerData --> ExpenseManager : return expenses: List<Expense>
deactivate TrackerData
ExpenseManager -> TrackerData : getCategories()
activate TrackerData
TrackerData --> ExpenseManager : return categories: List<Category>
deactivate TrackerData

ExpenseManager -> Format : formatInput(categoryName.trim())
activate Format
Format --> ExpenseManager : return formattedCategoryName: String
deactivate Format

loop Search for Category
ExpenseManager -> Category : Check if category matches formattedCategoryName
activate Category
Category --> ExpenseManager : Return matching category or null
deactivate Category

alt Category exists
    ExpenseManager -> Category : Retrieve existing category
    activate Category
    Category --> ExpenseManager : return category
    deactivate Category
else Category does not exist
    ExpenseManager -> Category : Create new Category
    activate Category
    Category --> ExpenseManager : return new category
    deactivate Category
end

ExpenseManager -> Expense : Create Expense(name, amount, category)
activate Expense
Expense --> ExpenseManager : return newExpense: Expense
deactivate Expense

ExpenseManager -> TrackerData : setExpenses(expenses)
activate TrackerData
TrackerData --> ExpenseManager : return
deactivate TrackerData

ExpenseManager -> TrackerData : setCategories(categories)
activate TrackerData
TrackerData --> ExpenseManager : return
deactivate TrackerData

ExpenseManager --> ExpenseManager : return
deactivate ExpenseManager

ExpenseManager --> Parser : return
deactivate ExpenseManager
Parser --> SpendSwift : return false
deactivate Parser
SpendSwift --> User : return
deactivate SpendSwift
@enduml
