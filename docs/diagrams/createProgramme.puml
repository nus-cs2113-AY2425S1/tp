@startuml

hide footbox

actor User as user
participant ":BuffBuddy" as BuffBuddy
participant ":Ui" as Ui
participant ":Parser" as Parser
participant ":CommandFactory" as CommandFactory
participant ":ProgrammeCommandFactory" as ProgCommandFactory
participant ":CreateProgrammeCommand" as CreateProgrammeCommand
participant ":ProgrammeList" as ProgrammeList
participant ":CommandResult" as CommandResult


user -> BuffBuddy: start BuffBuddy
activate BuffBuddy

create Ui
BuffBuddy -> Ui: Ui()
activate Ui

Ui --> BuffBuddy
deactivate Ui

create Parser
BuffBuddy -> Parser: Parser()
activate Parser

create CommandFactory
Parser -> CommandFactory: CommandResult()
activate CommandFactory

create ProgCommandFactory
CommandFactory -> ProgCommandFactory: ProgrammeCommandFactory()
activate ProgCommandFactory

ProgCommandFactory --> CommandFactory
deactivate ProgCommandFactory

CommandFactory --> Parser
deactivate CommandFactory

Parser --> BuffBuddy
deactivate Parser

create ProgrammeList
BuffBuddy -> ProgrammeList: loadProgrammeList()
activate ProgrammeList

ProgrammeList --> BuffBuddy
deactivate ProgrammeList

BuffBuddy -> Ui: readCommand()
activate Ui

Ui --> BuffBuddy: fullCommand


BuffBuddy -> Parser: parse(fullCommand)
activate Parser

Parser -> CommandFactory: createCommand(commandString, argumentString)
activate CommandFactory

alt commandString is prog command
    CommandFactory -> ProgCommandFactory: parse(argumentString)
    activate ProgCommandFactory

    alt subcommand is create command
        ProgCommandFactory -> ProgCommandFactory: prepareCreateCommand(arguments)
        activate ProgCommandFactory


        loop for each day
            ProgCommandFactory -> ProgCommandFactory: parseDay(dayString)
            activate ProgCommandFactory

            create ":Day" as Day
            ProgCommandFactory -> Day: Day()
            activate Day

            Day --> ProgCommandFactory
            deactivate Day


            loop for each exercise
                ProgCommandFactory -> ProgCommandFactory: parseExercise(exerciseString)
                activate ProgCommandFactory
            end

            create ":Exercise" as Exercise
            ProgCommandFactory -> Exercise: Exercise()
            activate Exercise

            Exercise --> ProgCommandFactory
            deactivate Exercise

           return return Exercise

           ProgCommandFactory -> Day: insertExercise()
           activate Day

           Day --> ProgCommandFactory
           deactivate Day

        end
        return return Day

    else subcommand is other commands
    end

    create  CreateProgrammeCommand
    ProgCommandFactory -> CreateProgrammeCommand: CreateProgrammeCommand()
    activate CreateProgrammeCommand

    CreateProgrammeCommand --> ProgCommandFactory
    deactivate CreateProgrammeCommand

    return return CreateProgrammeCommand

    ProgCommandFactory --> CommandFactory: Return CreateProgrammeCommand
    deactivate ProgCommandFactory
    destroy ProgCommandFactory


else commandString is other commands
end
CommandFactory --> Parser: Return CreateProgrammeCommand
deactivate CommandFactory


Parser --> BuffBuddy: Return CreateProgrammeCommand
deactivate Parser

BuffBuddy -> CreateProgrammeCommand: execute()
activate CreateProgrammeCommand

CreateProgrammeCommand -> ProgrammeList: insertProgramme(programmeName, programmeContents)
activate ProgrammeList

create ":Programme" as Programme
ProgrammeList -> Programme: Programme()
activate Programme

Programme --> ProgrammeList:
deactivate Programme

ProgrammeList --> CreateProgrammeCommand: Return Programme
deactivate ProgrammeList

create CommandResult
CreateProgrammeCommand -> CommandResult: CommandResult()

activate CommandResult

CommandResult --> CreateProgrammeCommand
deactivate CommandResult

CreateProgrammeCommand --> BuffBuddy: Return CommandResult
deactivate CreateProgrammeCommand
destroy CreateProgrammeCommand


BuffBuddy -> Ui: showMessage(result)


Ui --> user: Display result
destroy CommandResult

Ui --> BuffBuddy
deactivate BuffBuddy

deactivate Ui

@enduml
