@startuml

actor User
participant ":SpendSwift" as SpendSwift
participant ":Parser" as Parser
participant ":BudgetManager" as BudgetManager
participant ":Category" as Category
participant ":Expense" as Expense
participant ":Budget" as Budget
participant ":TrackerData" as TrackerData
participant ":SuccessMessage" as SuccessMessage

User -> SpendSwift : input("view-budget")
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> BudgetManager : viewBudget(trackerData)
activate BudgetManager

opt No Budgets Set
    BudgetManager -> SuccessMessage : printNoBudgetForAll()
    activate SuccessMessage
    SuccessMessage --> BudgetManager : return
    deactivate SuccessMessage
    BudgetManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

    BudgetManager -> TrackerData : Initialize totalExpensesToCategory map
    activate TrackerData
    TrackerData --> BudgetManager : return budgets Map<Category, Budget>
    deactivate TrackerData

    BudgetManager -> TrackerData : getExpenses()
    activate TrackerData
    TrackerData --> BudgetManager : return expenses: List<Expense>
    deactivate TrackerData

    loop Calculate Total Expenses Per Category
        BudgetManager -> Expense : Get category and amount for each expense
        activate Expense
        Expense --> BudgetManager : Return category and amount
        deactivate Expense

        BudgetManager -> BudgetManager : Update total expense in totalExpensesToCategory map
        activate BudgetManager
            BudgetManager --> BudgetManager : return
        deactivate BudgetManager
    end

    loop Calculate Remaining Budget for Each Category
        BudgetManager -> Budget : Get budget for each category with a set budget
        activate Budget
        Budget --> BudgetManager : Return budget limit
        deactivate Budget

        BudgetManager -> BudgetManager : Calculate remaining budget (limit - totalExpense)
        activate BudgetManager
        BudgetManager --> BudgetManager : return
        deactivate BudgetManager

        alt Remaining Budget >= 0
            BudgetManager -> SuccessMessage : printWithinBudget(category, totalExpense, remainingBudget)
            activate SuccessMessage
            SuccessMessage --> BudgetManager : return
            deactivate SuccessMessage
        else Over Budget
            BudgetManager -> SuccessMessage : printOverBudget(category, totalExpense, positive)
            activate SuccessMessage
            SuccessMessage --> BudgetManager : return
            deactivate SuccessMessage
        end
    end

    loop Check Categories Without Budgets
        BudgetManager -> Category : Check if each category in totalExpensesToCategory has a budget
        activate Category
        Category --> BudgetManager : Return category name if no budget set
        deactivate Category

        BudgetManager -> SuccessMessage : printNoBudget(category)
        activate SuccessMessage
        SuccessMessage --> BudgetManager : return
        deactivate SuccessMessage
    end
BudgetManager --> Parser : return
deactivate BudgetManager
Parser --> SpendSwift : return false
deactivate Parser
SpendSwift --> User : return
deactivate SpendSwift
@enduml
