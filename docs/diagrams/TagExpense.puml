@startuml
actor User
participant ":SpendSwift" as SpendSwift
participant ":Parser" as Parser
participant ":ExpenseManager" as ExpenseManager
participant ":TrackerData" as TrackerData
participant ":InputParser" as InputParser
participant ":ErrorMessage" as ErrorMessage
participant ":SuccessMessage" as SuccessMessage
participant ":Format" as Format
participant ":Category" as Category
participant ":Expense" as Expense

User -> SpendSwift : input("tag-expense e/1 c/Food")
activate SpendSwift
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> ExpenseManager : tagExpense(trackerData, input)

activate ExpenseManager
ExpenseManager -> InputParser : parseIndex(input)
activate InputParser
InputParser --> ExpenseManager : return expenseIndex: int
deactivate InputParser

opt Invalid Index
    ExpenseManager -> ErrorMessage : printInvalidIndex()
    activate ErrorMessage
    ErrorMessage --> ExpenseManager : return
    deactivate ErrorMessage
    ExpenseManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

ExpenseManager -> InputParser : parseCategory(input)
activate InputParser
InputParser --> ExpenseManager : return categoryName: String
deactivate InputParser

opt Invalid or Empty Category
    ExpenseManager -> ErrorMessage : printExpensesManagerEmptyCategory()
    activate ErrorMessage
    ErrorMessage --> ExpenseManager : return
    deactivate ErrorMessage
    ExpenseManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

    ExpenseManager -> ExpenseManager : tagExpenseHelper(trackerData, expenseIndex, categoryName)

    activate ExpenseManager
    ExpenseManager -> TrackerData : getExpenses()
    activate TrackerData
    TrackerData --> ExpenseManager : return expenses: List<Expense>
    deactivate TrackerData
    ExpenseManager -> TrackerData : getCategories()
    activate TrackerData
    TrackerData --> ExpenseManager : return categories: List<Category>
    deactivate TrackerData

    ExpenseManager -> Format : formatInput(categoryName.trim())
    activate Format
    Format --> ExpenseManager : return formattedCategoryName: String
    deactivate Format

    loop Check each category
        ExpenseManager -> Category : Check if name matches formattedCategoryName
        activate Category
        Category --> ExpenseManager : return category: String
        deactivate Category
    end

    alt Matching Category Found
        ExpenseManager -> Expense : setCategory(matchingCategory)
        activate Expense
        Expense --> ExpenseManager : return
        deactivate Expense
        ExpenseManager -> SuccessMessage : printTaggedExpense(expense)
        activate SuccessMessage
        SuccessMessage --> ExpenseManager : return
        deactivate SuccessMessage
    else No Matching Category
        ExpenseManager -> SuccessMessage : printMissingCategory(formattedCategoryName)
        activate SuccessMessage
        SuccessMessage --> ExpenseManager : return
        deactivate SuccessMessage
    end

    ExpenseManager -> TrackerData : setExpenses(expenses)
    activate TrackerData
    TrackerData --> ExpenseManager : return
    deactivate TrackerData

ExpenseManager --> ExpenseManager : return
deactivate ExpenseManager

ExpenseManager --> Parser : return
deactivate ExpenseManager
Parser --> SpendSwift : return false
deactivate Parser
SpendSwift --> User : return
deactivate SpendSwift

@enduml
