@startuml

actor User
participant ":SpendSwift" as SpendSwift
participant ":Parser" as Parser
participant ":CategoryManager" as CategoryManager
participant ":InputParser" as InputParser
participant ":ErrorMessage" as ErrorMessage
participant ":TrackerData" as TrackerData
participant ":Format" as Format
participant ":SuccessMessage" as SuccessMessage
participant ":Category" as Category

User -> SpendSwift : input("delete-category c/<categoryName>")
activate SpendSwift
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> CategoryManager : deleteCategory(input, trackerData)

activate CategoryManager
CategoryManager -> InputParser : parseCategory(input)

activate InputParser
InputParser -> InputParser : parseComponent(input, "c/")

    activate InputParser
    InputParser --> InputParser : return categoryName: String
    deactivate InputParser

InputParser --> CategoryManager : return categoryName: String
deactivate InputParser

opt categoryName == null || categoryName.isEmpty()
    CategoryManager -> ErrorMessage : printMissingCategory()
    activate ErrorMessage
    ErrorMessage --> CategoryManager : "Category name is empty!"
    deactivate ErrorMessage
    CategoryManager --> Parser : return
    Parser --> SpendSwift : return
    SpendSwift --> User : return
end

CategoryManager -> CategoryManager : deleteCategoryHelper(trackerData, categoryName)
activate CategoryManager
CategoryManager -> TrackerData : getCategories()
activate TrackerData
TrackerData --> CategoryManager : return categories: List<Category>
deactivate TrackerData
CategoryManager -> TrackerData : getExpenses()
activate TrackerData
TrackerData --> CategoryManager : return expenses: List<Expense>
deactivate TrackerData

loop Check each category
    CategoryManager -> Category : Check if name matches categoryName
    activate Category
    Category --> CategoryManager : return category: String
    deactivate Category
end

opt categoryToDelete == null
CategoryManager -> SuccessMessage : printCategoryDoesNotExist(categoryName)
activate SuccessMessage
SuccessMessage --> CategoryManager : return
deactivate SuccessMessage
end

loop Check each expense's category
    CategoryManager -> Expense : Check if expense's category matches categoryName
    activate Category
    Category --> CategoryManager : return hasTaggedExpense: boolean
    deactivate Category
end

alt hasTaggedExpense
CategoryManager -> SuccessMessage : printCategoryHasExpense(categoryName)
activate SuccessMessage
SuccessMessage --> CategoryManager : return
deactivate SuccessMessage

else !hasTaggedExpense
CategoryManager -> TrackerData : setCategories(categories)
activate TrackerData
TrackerData --> CategoryManager : return
deactivate TrackerData
CategoryManager -> SuccessMessage : printDeleteCategory(categoryName)
activate SuccessMessage
SuccessMessage --> CategoryManager : return
deactivate SuccessMessage
end

CategoryManager --> CategoryManager : return
deactivate CategoryManager

CategoryManager --> Parser : return
deactivate CategoryManager

Parser --> SpendSwift : return false
deactivate Parser

SpendSwift --> User : return
deactivate SpendSwift
@enduml