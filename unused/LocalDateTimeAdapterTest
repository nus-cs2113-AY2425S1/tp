//@@author YukeeHong-unused
/**
 * This class provides JUnit Tests for the LocalDateTimeAdapter.
 * The class is not used because LocalDateTimeAdapter is not in use.
 */

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class LocalDateTimeAdapterTest {

    private LocalDateTimeAdapter adapter;
    private StringWriter stringWriter;
    private JsonWriter jsonWriter;

    @BeforeEach
    void setUp() {
        adapter = new LocalDateTimeAdapter();
        stringWriter = new StringWriter();
        jsonWriter = new JsonWriter(stringWriter);
    }

    @Test
    void write_validDateTime_success() throws IOException {
        // Arrange
        LocalDateTime dateTime = LocalDateTime.of(2024, 1, 1, 12, 30);
        String expected = "\"2024-01-01 1230\"";

        // Act
        adapter.write(jsonWriter, dateTime);
        jsonWriter.flush();

        // Assert
        assertEquals(expected, stringWriter.toString());
    }

    @Test
    void write_midnightDateTime_success() throws IOException {
        // Arrange
        LocalDateTime dateTime = LocalDateTime.of(2024, 1, 1, 0, 0);
        String expected = "\"2024-01-01 0000\"";

        // Act
        adapter.write(jsonWriter, dateTime);
        jsonWriter.flush();

        // Assert
        assertEquals(expected, stringWriter.toString());
    }

    @Test
    void write_singleDigitValues_success() throws IOException {
        // Arrange
        LocalDateTime dateTime = LocalDateTime.of(2024, 1, 1, 9, 5);
        String expected = "\"2024-01-01 0905\"";

        // Act
        adapter.write(jsonWriter, dateTime);
        jsonWriter.flush();

        // Assert
        assertEquals(expected, stringWriter.toString());
    }

    @Test
    void read_validDateTime_success() throws IOException {
        // Arrange
        String input = "\"2024-01-01 1230\"";
        JsonReader jsonReader = new JsonReader(new StringReader(input));
        jsonReader.setLenient(true);
        LocalDateTime expected = LocalDateTime.of(2024, 1, 1, 12, 30);

        // Act
        LocalDateTime result = adapter.read(jsonReader);

        // Assert
        assertEquals(expected, result);
    }

    @Test
    void read_midnightDateTime_success() throws IOException {
        // Arrange
        String input = "\"2024-01-01 0000\"";
        JsonReader jsonReader = new JsonReader(new StringReader(input));
        jsonReader.setLenient(true);
        LocalDateTime expected = LocalDateTime.of(2024, 1, 1, 0, 0);

        // Act
        LocalDateTime result = adapter.read(jsonReader);

        // Assert
        assertEquals(expected, result);
    }

    @Test
    void read_singleDigitValues_success() throws IOException {
        // Arrange
        String input = "\"2024-01-01 0905\"";
        JsonReader jsonReader = new JsonReader(new StringReader(input));
        jsonReader.setLenient(true);
        LocalDateTime expected = LocalDateTime.of(2024, 1, 1, 9, 5);

        // Act
        LocalDateTime result = adapter.read(jsonReader);

        // Assert
        assertEquals(expected, result);
    }

    @Test
    void read_invalidFormat_throwsDateTimeParseException() {
        // Arrange
        String input = "\"2024-01\""; // Missing time
        JsonReader jsonReader = new JsonReader(new StringReader(input));
        jsonReader.setLenient(true);

        // Act & Assert
        assertThrows(DateTimeParseException.class, () -> adapter.read(jsonReader));
    }

    @Test
    void read_invalidTimeFormat_throwsDateTimeParseException() {
        // Arrange
        String input = "\"2024-01-01 12:30\""; // Wrong time format (using :)
        JsonReader jsonReader = new JsonReader(new StringReader(input));
        jsonReader.setLenient(true);

        // Act & Assert
        assertThrows(DateTimeParseException.class, () -> adapter.read(jsonReader));
    }

    @Test
    void roundTrip_writeAndRead_success() throws IOException {
        // Arrange
        LocalDateTime original = LocalDateTime.of(2024, 1, 1, 12, 30);

        // Write
        adapter.write(jsonWriter, original);
        jsonWriter.flush();
        String json = stringWriter.toString();

        // Read
        JsonReader jsonReader = new JsonReader(new StringReader(json));
        jsonReader.setLenient(true);

        // Act
        LocalDateTime result = adapter.read(jsonReader);

        // Assert
        assertEquals(original, result);
    }
}
